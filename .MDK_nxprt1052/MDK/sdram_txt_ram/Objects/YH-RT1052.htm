<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sdram_txt_ram\Objects\YH-RT1052.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sdram_txt_ram\Objects\YH-RT1052.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 08 17:33:52 2021
<BR><P>
<H3>Maximum Stack Usage =       1816 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
stbtt_MakeCodepointBitmap &rArr; stbtt_MakeCodepointBitmapSubpixel &rArr; stbtt_MakeGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DebugMon_Handler</a><BR>
 <LI><a href="#[1d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PendSV_Handler</a><BR>
 <LI><a href="#[13a]">LOG_Push</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">__aeabi_assert</a><BR>
 <LI><a href="#[171]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">__aeabi_assert</a><BR>
 <LI><a href="#[172]">LPUART_ReadBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">__aeabi_assert</a><BR>
 <LI><a href="#[1e9]">stbtt__sort_edges_quicksort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e9]">stbtt__sort_edges_quicksort</a><BR>
 <LI><a href="#[1b4]">stbtt__tesselate_curve</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b4]">stbtt__tesselate_curve</a><BR>
 <LI><a href="#[1b5]">stbtt__tesselate_cubic</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b5]">stbtt__tesselate_cubic</a><BR>
 <LI><a href="#[1bf]">stbtt__GetGlyphShapeTT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">stbtt_GetGlyphShape</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9a]">ACMP1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9b]">ACMP2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9c]">ACMP3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9d]">ACMP4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[62]">ADC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[63]">ADC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[98]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[95]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[96]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[97]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5c]">ANATOP_EVENT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5d]">ANATOP_EVENT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5e]">ANATOP_TAMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5f]">ANATOP_TEMP_PANIC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[56]">BEE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e4]">CAN1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[43]">CAN1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e5]">CAN2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[44]">CAN2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7e]">CCM_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7f]">CCM_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[32]">CORE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4a]">CSI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[50]">CSU_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[30]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[31]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[64]">DCDC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[51]">DCP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[52]">DCP_VMI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c3]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1f]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cd]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[29]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ce]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2a]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cf]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2b]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d0]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2c]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d1]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2d]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d2]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2e]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c4]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[20]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c5]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[21]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c6]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[22]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c7]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[23]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c8]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[24]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c9]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[25]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ca]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[26]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cb]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[27]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cc]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[28]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d3]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2f]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f2]">DbgConsole_RelocateLog</a> from fsl_debug_console.o(i.DbgConsole_RelocateLog) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[1c]">DebugMon_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bf]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[bf]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 79 times from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a0]">ENC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a1]">ENC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a2]">ENC3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a3]">ENC4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f1]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[92]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f0]">ENET_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[91]">ENET_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7d]">EWM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[eb]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[79]">FLEXIO1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ec]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7a]">FLEXIO2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[45]">FLEXRAM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ed]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[8b]">FLEXSPI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[80]">GPC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6f]">GPIO1_Combined_0_15_IRQHandler</a> from bsp_i2c_touch.o(i.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[70]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[67]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[68]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[69]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6a]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6b]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6c]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6d]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6e]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[71]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[72]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[73]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[74]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[75]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[76]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[77]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[78]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[48]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[83]">GPT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[84]">GPT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7]">GUI_AsserParam</a> from rh_gui.o(i.GUI_AsserParam) referenced 2 times from rh_gui.o(.data)
 <LI><a href="#[8]">GUI_Delay</a> from rh_gui.o(i.GUI_Delay) referenced 2 times from rh_gui.o(.data)
 <LI><a href="#[5]">GUI_DrawArea</a> from rh_gui.o(i.GUI_DrawArea) referenced 2 times from rh_gui.o(.data)
 <LI><a href="#[6]">GUI_DummyDrawPixel</a> from rh_gui.o(i.GUI_DummyDrawPixel) referenced 2 times from rh_gui.o(.data)
 <LI><a href="#[17]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f3]">I2C_Master_Callback</a> from bsp_i2c_touch.o(i.I2C_Master_Callback) referenced from bsp_i2c_touch.o(i.GTP_I2C_ModeInit)
 <LI><a href="#[46]">KPP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[49]">LCDIF_IRQHandler</a> from bsp_lcd.o(i.LCDIF_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[dc]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3b]">LPI2C1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[dd]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3c]">LPI2C2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[de]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3d]">LPI2C3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[df]">LPI2C4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3e]">LPI2C4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f4]">LPI2C_MasterTransferHandleIRQ</a> from fsl_lpi2c.o(i.LPI2C_MasterTransferHandleIRQ) referenced from fsl_lpi2c.o(i.LPI2C_MasterTransferCreateHandle)
 <LI><a href="#[e0]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3f]">LPSPI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e1]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[40]">LPSPI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e2]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[41]">LPSPI3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e3]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[42]">LPSPI4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d4]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[33]">LPUART1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d5]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[34]">LPUART2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d6]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[35]">LPUART3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d7]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[36]">LPUART4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d8]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[37]">LPUART5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d9]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[38]">LPUART6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[da]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[39]">LPUART7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[db]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3a]">LPUART8_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[be]">NMI_WAKEUP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[99]">PIT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[85]">PWM1_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[86]">PWM1_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[87]">PWM1_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[88]">PWM1_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[89]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a8]">PWM2_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a9]">PWM2_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[aa]">PWM2_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ab]">PWM2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ac]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ad]">PWM3_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ae]">PWM3_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[af]">PWM3_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b0]">PWM3_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b1]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b2]">PWM4_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b3]">PWM4_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b4]">PWM4_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b5]">PWM4_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b6]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4b]">PXP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7c]">RTWDOG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[82]">Reserved115_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8a]">Reserved123_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9e]">Reserved143_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9f]">Reserved144_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b7]">Reserved168_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b8]">Reserved169_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b9]">Reserved170_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ba]">Reserved171_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bb]">Reserved172_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bc]">Reserved173_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[53]">Reserved68_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[65]">Reserved86_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[66]">Reserved87_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e6]">SAI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[57]">SAI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e7]">SAI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[58]">SAI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e8]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[59]">SAI3_RX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e9]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[5a]">SAI3_TX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8c]">SEMC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bd]">SJC_ARM_DEBUG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[55]">SJC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4d]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4e]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4f]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ea]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[5b]">SPDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[81]">SRC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from bsp_systick.o(i.SysTick_Handler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c1]">SystemInit</a> from system_mimxrt1052.o(i.SystemInit) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a4]">TMR1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a5]">TMR2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a6]">TMR3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a7]">TMR4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[54]">TRNG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[47]">TSC_DIG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[90]">USB_OTG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8f]">USB_OTG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[60]">USB_PHY1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[61]">USB_PHY2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ee]">USDHC1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[8d]">USDHC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ef]">USDHC2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[8e]">USDHC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7b]">WDOG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4c]">WDOG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[93]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[94]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[fb]">__ApplyPixel_cpblur</a> from rh_graphic.o(i.__ApplyPixel_cpblur) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[fc]">__ApplyPixel_eor</a> from rh_graphic.o(i.__ApplyPixel_eor) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[f7]">__ApplyPixel_fill</a> from rh_graphic.o(i.__ApplyPixel_fill) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[f8]">__ApplyPixel_lightness</a> from rh_graphic.o(i.__ApplyPixel_lightness) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[f5]">__ApplyPixel_mark</a> from rh_graphic.o(i.__ApplyPixel_mark) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[fa]">__ApplyPixel_reverse</a> from rh_graphic.o(i.__ApplyPixel_reverse) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[f6]">__ApplyPixel_unmark</a> from rh_graphic.o(i.__ApplyPixel_unmark) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[f9]">__ApplyPixel_unzero</a> from rh_graphic.o(i.__ApplyPixel_unzero) referenced from rh_graphic.o(.constdata)
 <LI><a href="#[c2]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[c0]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[13]">rhtt_GetCodepointBitmapBox</a> from rh_font.o(i.rhtt_GetCodepointBitmapBox) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[12]">rhtt_GetCodepointHMetrics</a> from rh_font.o(i.rhtt_GetCodepointHMetrics) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[11]">rhtt_GetFontVMetrics</a> from rh_font.o(i.rhtt_GetFontVMetrics) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[f]">rhtt_InitFont</a> from rh_font.o(i.rhtt_InitFont) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[14]">rhtt_MakeCodepointBitmap</a> from rh_font.o(i.rhtt_MakeCodepointBitmap) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[10]">rhtt_ScaleForPixelHeight</a> from rh_font.o(i.rhtt_ScaleForPixelHeight) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[d]">stbtt_GetCodepointBitmapBox</a> from rh_font.o(i.stbtt_GetCodepointBitmapBox) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[c]">stbtt_GetCodepointHMetrics</a> from rh_font.o(i.stbtt_GetCodepointHMetrics) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[b]">stbtt_GetFontVMetrics</a> from rh_font.o(i.stbtt_GetFontVMetrics) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[9]">stbtt_InitFont</a> from rh_font.o(i.stbtt_InitFont) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[e]">stbtt_MakeCodepointBitmap</a> from rh_font.o(i.stbtt_MakeCodepointBitmap) referenced 2 times from rh_font.o(.data)
 <LI><a href="#[a]">stbtt_ScaleForPixelHeight</a> from rh_font.o(i.stbtt_ScaleForPixelHeight) referenced 2 times from rh_font.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c2]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1eb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[fd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ec]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ed]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ee]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ef]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ANATOP_EVENT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ANATOP_EVENT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ANATOP_TAMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ANATOP_TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(.text)
<LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>NMI_WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Reserved168_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>Reserved169_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Reserved170_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>Reserved172_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>Reserved173_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SJC_ARM_DEBUG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_MakeCodepointBitmap
</UL>

<P><STRONG><a name="[1f1]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_ins_sort
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ELCDIF_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__touchinfo_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func1
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[198]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[10b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[107]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[1a9]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1fa]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[1fc]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 586 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb1Pll
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, board.o(i.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board.o(i.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[119]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>BOARD_InitPins</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>CLOCK_GetFreq</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>

<P><STRONG><a name="[117]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[129]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[128]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[110]"></a>CLOCK_InitUsb1Pll</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitUsb1Pll))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[17d]"></a>CLOCK_InitVideoPll</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitVideoPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitVideoPll
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitClock
</UL>

<P><STRONG><a name="[130]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, core_delay.o(i.CPU_TS_TmrInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>

<P><STRONG><a name="[131]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_delay.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>

<P><STRONG><a name="[12f]"></a>CPU_TS_Tmr_Delay_US</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, core_delay.o(i.CPU_TS_Tmr_Delay_US))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CPU_TS_Tmr_Delay_US &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_ResetChip
</UL>

<P><STRONG><a name="[11a]"></a>DbgConsole_Init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = DbgConsole_Init &rArr; LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[137]"></a>DbgConsole_Printf</STRONG> (Thumb, 60 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Timeout_Callback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
</UL>

<P><STRONG><a name="[13d]"></a>ELCDIF_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_elcdif.o(i.ELCDIF_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ELCDIF_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[13c]"></a>ELCDIF_RgbModeInit</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, fsl_elcdif.o(i.ELCDIF_RgbModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ELCDIF_RgbModeInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_Reset
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_GetInstance
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ELCDIF_Config
</UL>

<P><STRONG><a name="[6f]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.GPIO1_Combined_0_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>GPIO_PinInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLight_ON
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Mode_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_ResetChip
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQEnable
</UL>

<P><STRONG><a name="[141]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[140]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_ResetChip
</UL>

<P><STRONG><a name="[16b]"></a>GTP_IRQDisable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.GTP_IRQDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GTP_IRQDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[14b]"></a>GTP_IRQEnable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.GTP_IRQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GTP_IRQEnable &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortEnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQ_Enable
</UL>

<P><STRONG><a name="[14d]"></a>GTP_IRQ_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.GTP_IRQ_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = GTP_IRQ_Enable &rArr; GTP_IRQEnable &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[14e]"></a>GTP_Init_Panel</STRONG> (Thumb, 558 bytes, Stack size 296 bytes, bsp_touch_gtxx.o(i.GTP_Init_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQ_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__touchinfo_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>GTP_Read_Version</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, bsp_touch_gtxx.o(i.GTP_Read_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[155]"></a>GTP_ResetChip</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.GTP_ResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GTP_ResetChip &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortEnableInterrupts
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[156]"></a>GTP_TouchProcess</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.GTP_TouchProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = GTP_TouchProcess &rArr; Goodix_TS_Work_Func1 &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>GUI_AddScreenArea</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rh_gui.o(i.GUI_AddScreenArea))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_rect_fill
</UL>

<P><STRONG><a name="[7]"></a>GUI_AsserParam</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rh_gui.o(i.GUI_AsserParam))
<BR>[Address Reference Count : 1]<UL><LI> rh_gui.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>GUI_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rh_gui.o(i.GUI_Delay))
<BR>[Address Reference Count : 1]<UL><LI> rh_gui.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>GUI_DrawArea</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, rh_gui.o(i.GUI_DrawArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DrawArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_gui.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>GUI_DummyDrawPixel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rh_gui.o(i.GUI_DummyDrawPixel))
<BR>[Address Reference Count : 1]<UL><LI> rh_gui.o(.data)
</UL>
<P><STRONG><a name="[158]"></a>GUI_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rh_gui.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GUI_Init &rArr; __Stack_createBase &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>GUI_RefreashScreenArea</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rh_gui.o(i.GUI_RefreashScreenArea))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_rect_fill
</UL>

<P><STRONG><a name="[15c]"></a>GUI_rect_fill</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rh_gui.o(i.GUI_rect_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = GUI_rect_fill &rArr; __Graph_rect_fill &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RefreashScreenArea
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddScreenArea
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>GUI_set_penColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rh_gui.o(i.GUI_set_penColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_set_penColor
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>GUI_set_penSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rh_gui.o(i.GUI_set_penSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_set_penSize
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_set_penSize
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>I2C_ReadBytes</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, bsp_i2c_touch.o(i.I2C_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = I2C_ReadBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Timeout_Callback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[14f]"></a>I2C_Touch_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.I2C_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = I2C_Touch_Init &rArr; GTP_I2C_ModeInit &rArr; LPI2C_MasterInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IOMUXC_PAD_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IOMUXC_MUX_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_ResetChip
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[16c]"></a>I2C_WriteBytes</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, bsp_i2c_touch.o(i.I2C_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Timeout_Callback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Tmr_Delay_US
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[16d]"></a>IO_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fsl_io.o(i.IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
</UL>

<P><STRONG><a name="[170]"></a>IO_Transfer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_io.o(i.IO_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_Transfer &rArr; LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Pop
</UL>

<P><STRONG><a name="[49]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCDIF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>LCD_BackLight_ON</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_BackLight_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LCD_BackLight_ON &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[17a]"></a>LCD_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LCD_Init &rArr; LCD_ELCDIF_Config &rArr; ELCDIF_RgbModeInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InterruptConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitClock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLight_ON
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOMUXC_PAD_Config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOMUXC_MUX_Config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ELCDIF_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>LCD_InitClock</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_InitClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LCD_InitClock &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[17c]"></a>LCD_InterruptConfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_InterruptConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[17e]"></a>LED_GPIO_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LED_GPIO_Config &rArr; LED_GPIO_Mode_Config &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_PAD_Config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_MUX_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>LOG_Init</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fsl_log.o(i.LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[184]"></a>LOG_Pop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_log.o(i.LOG_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LOG_Pop &rArr; IO_Transfer &rArr; LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
</UL>

<P><STRONG><a name="[13a]"></a>LOG_Push</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_log.o(i.LOG_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = LOG_Push &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_RelocateLog
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[dc]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>LPI2C_CheckForBusyBus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CheckForBusyBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CheckForBusyBus
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[188]"></a>LPI2C_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPI2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[189]"></a>LPI2C_MasterCheckAndClearError</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_MasterCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[145]"></a>LPI2C_MasterGetDefaultConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterGetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
</UL>

<P><STRONG><a name="[146]"></a>LPI2C_MasterInit</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, fsl_lpi2c.o(i.LPI2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPI2C_MasterInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetCyclesForWidth
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
</UL>

<P><STRONG><a name="[18c]"></a>LPI2C_MasterSetBaudRate</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, fsl_lpi2c.o(i.LPI2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPI2C_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[147]"></a>LPI2C_MasterTransferCreateHandle</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.LPI2C_MasterTransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPI2C_MasterTransferCreateHandle &rArr; LPI2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
</UL>

<P><STRONG><a name="[f4]"></a>LPI2C_MasterTransferHandleIRQ</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.LPI2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPI2C_MasterTransferHandleIRQ &rArr; LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpi2c.o(i.LPI2C_MasterTransferCreateHandle)
</UL>
<P><STRONG><a name="[169]"></a>LPI2C_MasterTransferNonBlocking</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.LPI2C_MasterTransferNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnableInterrupts
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_InitTransferStateMachine
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[d4]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
</UL>

<P><STRONG><a name="[16e]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[197]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[196]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
</UL>

<P><STRONG><a name="[16f]"></a>LPUART_Init</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[172]"></a>LPUART_ReadBlocking</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>

<P><STRONG><a name="[171]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>

<P><STRONG><a name="[1ac]"></a>PutPixel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_lcd.o(i.PutPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>StrFormatPrintf</STRONG> (Thumb, 1576 bytes, Stack size 160 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bsp_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>SysTick_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>SystemInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, system_mimxrt1052.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[19d]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1052.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1aa]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15b]"></a>__Font_init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, rh_font.o(i.__Font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Font_init &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[15a]"></a>__Graph_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rh_graphic.o(i.__Graph_init))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[15d]"></a>__Graph_rect_fill</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, rh_graphic.o(i.__Graph_rect_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = __Graph_rect_fill &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_rect_fill
</UL>

<P><STRONG><a name="[161]"></a>__Graph_set_penColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rh_graphic.o(i.__Graph_set_penColor))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_set_penColor
</UL>

<P><STRONG><a name="[163]"></a>__Graph_set_penSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rh_graphic.o(i.__Graph_set_penSize))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_set_penSize
</UL>

<P><STRONG><a name="[159]"></a>__Stack_createBase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rh_data.o(i.__Stack_createBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = __Stack_createBase &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__handle_clipped_edge
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_GetInstance
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_unzero
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_unmark
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_reverse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_mark
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_lightness
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_fill
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ApplyPixel_eor
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_ScaleForPixelHeight
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_MakeCodepointBitmap
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_InitFont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetFontVMetrics
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetCodepointHMetrics
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhtt_GetCodepointBitmapBox
</UL>

<P><STRONG><a name="[153]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc2.o(i.__free$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_cleanup
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeGlyphBitmapSubpixel
</UL>

<P><STRONG><a name="[1bb]"></a>__hardfp_ceil</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[1ba]"></a>__hardfp_floor</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[133]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[134]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[19e]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Font_init
</UL>

<P><STRONG><a name="[1ab]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[1a8]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[151]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc2.o(i.__malloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_alloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Stack_createBase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Graph_rect_fill
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[1a2]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a0]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a6]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a3]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a7]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ff]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[200]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[201]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a1]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a5]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c0]"></a>main</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = main &rArr; GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_set_penSize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_set_penColor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_rect_fill
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13]"></a>rhtt_GetCodepointBitmapBox</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, rh_font.o(i.rhtt_GetCodepointBitmapBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rhtt_GetCodepointBitmapBox &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>rhtt_GetCodepointHMetrics</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rh_font.o(i.rhtt_GetCodepointHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rhtt_GetCodepointHMetrics &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>rhtt_GetFontVMetrics</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rh_font.o(i.rhtt_GetFontVMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rhtt_GetFontVMetrics &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>rhtt_InitFont</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rh_font.o(i.rhtt_InitFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rhtt_InitFont &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>rhtt_MakeCodepointBitmap</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rh_font.o(i.rhtt_MakeCodepointBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = rhtt_MakeCodepointBitmap &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>rhtt_ScaleForPixelHeight</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rh_font.o(i.rhtt_ScaleForPixelHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rhtt_ScaleForPixelHeight &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[1a4]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ae]"></a>stbtt_FindGlyphIndex</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, rh_font.o(i.stbtt_FindGlyphIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = stbtt_FindGlyphIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeCodepointBitmapSubpixel
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointHMetrics
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[d]"></a>stbtt_GetCodepointBitmapBox</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, rh_font.o(i.stbtt_GetCodepointBitmapBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = stbtt_GetCodepointBitmapBox &rArr; stbtt_GetCodepointBitmapBoxSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapBoxSubpixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>stbtt_GetCodepointBitmapBoxSubpixel</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, rh_font.o(i.stbtt_GetCodepointBitmapBoxSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = stbtt_GetCodepointBitmapBoxSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapBox
</UL>

<P><STRONG><a name="[c]"></a>stbtt_GetCodepointHMetrics</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rh_font.o(i.stbtt_GetCodepointHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = stbtt_GetCodepointHMetrics &rArr; stbtt_FindGlyphIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>stbtt_GetFontVMetrics</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rh_font.o(i.stbtt_GetFontVMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_GetFontVMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[1b7]"></a>stbtt_GetGlyphBitmapBoxSubpixel</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, rh_font.o(i.stbtt_GetGlyphBitmapBoxSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeGlyphBitmapSubpixel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[1b9]"></a>stbtt_GetGlyphBox</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rh_font.o(i.stbtt_GetGlyphBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>

<P><STRONG><a name="[1b8]"></a>stbtt_GetGlyphHMetrics</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, rh_font.o(i.stbtt_GetGlyphHMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_GetGlyphHMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetCodepointHMetrics
</UL>

<P><STRONG><a name="[1be]"></a>stbtt_GetGlyphShape</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rh_font.o(i.stbtt_GetGlyphShape))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = stbtt_GetGlyphShape &rArr; stbtt__GetGlyphShapeT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeGlyphBitmapSubpixel
</UL>

<P><STRONG><a name="[9]"></a>stbtt_InitFont</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rh_font.o(i.stbtt_InitFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = stbtt_InitFont &rArr; stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>stbtt_MakeCodepointBitmap</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, rh_font.o(i.stbtt_MakeCodepointBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = stbtt_MakeCodepointBitmap &rArr; stbtt_MakeCodepointBitmapSubpixel &rArr; stbtt_MakeGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeCodepointBitmapSubpixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL>
<P><STRONG><a name="[1cc]"></a>stbtt_MakeCodepointBitmapSubpixel</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, rh_font.o(i.stbtt_MakeCodepointBitmapSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = stbtt_MakeCodepointBitmapSubpixel &rArr; stbtt_MakeGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeGlyphBitmapSubpixel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeCodepointBitmap
</UL>

<P><STRONG><a name="[1cd]"></a>stbtt_MakeGlyphBitmapSubpixel</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, rh_font.o(i.stbtt_MakeGlyphBitmapSubpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = stbtt_MakeGlyphBitmapSubpixel &rArr; stbtt_GetGlyphBitmapBoxSubpixel &rArr; stbtt_GetGlyphBox &rArr; stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBitmapBoxSubpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeCodepointBitmapSubpixel
</UL>

<P><STRONG><a name="[1ce]"></a>stbtt_Rasterize</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, rh_font.o(i.stbtt_Rasterize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = stbtt_Rasterize &rArr; stbtt__rasterize &rArr; stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_MakeGlyphBitmapSubpixel
</UL>

<P><STRONG><a name="[a]"></a>stbtt_ScaleForPixelHeight</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rh_font.o(i.stbtt_ScaleForPixelHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stbtt_ScaleForPixelHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_font.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19c]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_mimxrt1052.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19b]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_mimxrt1052.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12a]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[127]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[123]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fsl_gpio.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[13e]"></a>GPIO_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[11f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_elcdif.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[124]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_elcdif.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[13b]"></a>ELCDIF_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_elcdif.o(i.ELCDIF_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ELCDIF_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
</UL>

<P><STRONG><a name="[122]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[125]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[190]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
</UL>

<P><STRONG><a name="[185]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>LPI2C_GetCyclesForWidth</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, fsl_lpi2c.o(i.LPI2C_GetCyclesForWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPI2C_GetCyclesForWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[192]"></a>LPI2C_InitTransferStateMachine</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, fsl_lpi2c.o(i.LPI2C_InitTransferStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPI2C_InitTransferStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[18a]"></a>LPI2C_MasterClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
</UL>

<P><STRONG><a name="[18f]"></a>LPI2C_MasterDisableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterDisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[18e]"></a>LPI2C_MasterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[193]"></a>LPI2C_MasterEnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterEnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[194]"></a>LPI2C_MasterGetFifoCounts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterGetFifoCounts))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[187]"></a>LPI2C_MasterGetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_RunTransferStateMachine
</UL>

<P><STRONG><a name="[18b]"></a>LPI2C_MasterReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterReset))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[191]"></a>LPI2C_RunTransferStateMachine</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, fsl_lpi2c.o(i.LPI2C_RunTransferStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LPI2C_RunTransferStateMachine &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetFifoCounts
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[f2]"></a>DbgConsole_RelocateLog</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_RelocateLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DbgConsole_RelocateLog &rArr; LOG_Push &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[132]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 430 bytes, Stack size 120 bytes, fsl_str.o(i.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[135]"></a>ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[118]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[113]"></a>SCB_DisableDCache</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, board.o(i.SCB_DisableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[114]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, board.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[115]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, board.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[11c]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[11e]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[11d]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, pin_mux.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[183]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, bsp_led.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_PAD_Config
</UL>

<P><STRONG><a name="[182]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, bsp_led.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_MUX_Config
</UL>

<P><STRONG><a name="[181]"></a>LED_GPIO_Mode_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_led.o(i.LED_GPIO_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LED_GPIO_Mode_Config &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[17f]"></a>LED_IOMUXC_MUX_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_led.o(i.LED_IOMUXC_MUX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_IOMUXC_MUX_Config &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[180]"></a>LED_IOMUXC_PAD_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_led.o(i.LED_IOMUXC_PAD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_IOMUXC_PAD_Config &rArr; IOMUXC_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_lcd.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitClock
</UL>

<P><STRONG><a name="[12d]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_lcd.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitClock
</UL>

<P><STRONG><a name="[179]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, bsp_lcd.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOMUXC_PAD_Config
</UL>

<P><STRONG><a name="[177]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, bsp_lcd.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOMUXC_MUX_Config
</UL>

<P><STRONG><a name="[174]"></a>LCD_ELCDIF_Config</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, bsp_lcd.o(i.LCD_ELCDIF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LCD_ELCDIF_Config &rArr; ELCDIF_RgbModeInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELCDIF_RgbModeInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[176]"></a>LCD_IOMUXC_MUX_Config</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_IOMUXC_MUX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_IOMUXC_MUX_Config &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[178]"></a>LCD_IOMUXC_PAD_Config</STRONG> (Thumb, 546 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_IOMUXC_PAD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_IOMUXC_PAD_Config &rArr; IOMUXC_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[19a]"></a>SysTick_Config</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, bsp_systick.o(i.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[12c]"></a>CLOCK_SetDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
</UL>

<P><STRONG><a name="[12e]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_ModeInit
</UL>

<P><STRONG><a name="[14c]"></a>GPIO_PortEnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_i2c_touch.o(i.GPIO_PortEnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_ResetChip
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_IRQEnable
</UL>

<P><STRONG><a name="[144]"></a>GTP_I2C_ModeInit</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bsp_i2c_touch.o(i.GTP_I2C_ModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = GTP_I2C_ModeInit &rArr; LPI2C_MasterInit &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferCreateHandle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[164]"></a>I2C_GTP_IOMUXC_MUX_Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.I2C_GTP_IOMUXC_MUX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_GTP_IOMUXC_MUX_Config &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[166]"></a>I2C_GTP_IOMUXC_PAD_Config</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_i2c_touch.o(i.I2C_GTP_IOMUXC_PAD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_GTP_IOMUXC_PAD_Config &rArr; IOMUXC_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[f3]"></a>I2C_Master_Callback</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, bsp_i2c_touch.o(i.I2C_Master_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Master_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c_touch.o(i.GTP_I2C_ModeInit)
</UL>
<P><STRONG><a name="[16a]"></a>I2C_Timeout_Callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_i2c_touch.o(i.I2C_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = I2C_Timeout_Callback &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[167]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, bsp_i2c_touch.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IOMUXC_PAD_Config
</UL>

<P><STRONG><a name="[165]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, bsp_i2c_touch.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IOMUXC_MUX_Config
</UL>

<P><STRONG><a name="[142]"></a>GTP_Get_Info</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, bsp_touch_gtxx.o(i.GTP_Get_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[143]"></a>GTP_I2C_Read</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
</UL>

<P><STRONG><a name="[149]"></a>GTP_I2C_Test</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GTP_I2C_Test &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[14a]"></a>GTP_I2C_Write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, bsp_touch_gtxx.o(i.GTP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = GTP_I2C_Write &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func1
</UL>

<P><STRONG><a name="[157]"></a>Goodix_TS_Work_Func1</STRONG> (Thumb, 566 bytes, Stack size 104 bytes, bsp_touch_gtxx.o(i.Goodix_TS_Work_Func1))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = Goodix_TS_Work_Func1 &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>

<P><STRONG><a name="[148]"></a>I2C_Transfer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bsp_touch_gtxx.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = I2C_Transfer &rArr; I2C_WriteBytes &rArr; LPI2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>

<P><STRONG><a name="[154]"></a>__touchinfo_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_touch_gtxx.o(i.__touchinfo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __touchinfo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[1b2]"></a>stbtt_FlattenCurves</STRONG> (Thumb, 778 bytes, Stack size 64 bytes, rh_font.o(i.stbtt_FlattenCurves))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = stbtt_FlattenCurves &rArr; stbtt__tesselate_cubic &rArr;  stbtt__tesselate_cubic (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
</UL>

<P><STRONG><a name="[1c1]"></a>stbtt_InitFont_internal</STRONG> (Thumb, 740 bytes, Stack size 112 bytes, rh_font.o(i.stbtt_InitFont_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = stbtt_InitFont_internal &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont
</UL>

<P><STRONG><a name="[1bd]"></a>stbtt__GetGlyfOffset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rh_font.o(i.stbtt__GetGlyfOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = stbtt__GetGlyfOffset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
</UL>

<P><STRONG><a name="[1bc]"></a>stbtt__GetGlyphInfoT2</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, rh_font.o(i.stbtt__GetGlyphInfoT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = stbtt__GetGlyphInfoT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
</UL>

<P><STRONG><a name="[1c0]"></a>stbtt__GetGlyphShapeT2</STRONG> (Thumb, 108 bytes, Stack size 112 bytes, rh_font.o(i.stbtt__GetGlyphShapeT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = stbtt__GetGlyphShapeT2 &rArr; stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
</UL>

<P><STRONG><a name="[1bf]"></a>stbtt__GetGlyphShapeTT</STRONG> (Thumb, 1812 bytes, Stack size 152 bytes, rh_font.o(i.stbtt__GetGlyphShapeTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + In Cycle
<LI>Call Chain = stbtt__GetGlyphShapeTT &rArr;  stbtt_GetGlyphShape (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttSHORT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__close_shape
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphShape
</UL>

<P><STRONG><a name="[1b3]"></a>stbtt__add_point</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rh_font.o(i.stbtt__add_point))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[1d3]"></a>stbtt__buf_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rh_font.o(i.stbtt__buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = stbtt__buf_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
</UL>

<P><STRONG><a name="[1c5]"></a>stbtt__buf_get8</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rh_font.o(i.stbtt__buf_get8))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1d7]"></a>stbtt__buf_peek8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rh_font.o(i.stbtt__buf_peek8))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
</UL>

<P><STRONG><a name="[1cb]"></a>stbtt__buf_range</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__buf_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1c6]"></a>stbtt__buf_seek</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rh_font.o(i.stbtt__buf_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = stbtt__buf_seek &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1c4]"></a>stbtt__buf_skip</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rh_font.o(i.stbtt__buf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stbtt__buf_skip &rArr; stbtt__buf_seek &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1c7]"></a>stbtt__cff_get_index</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__cff_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = stbtt__cff_get_index &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1d4]"></a>stbtt__cff_index_count</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rh_font.o(i.stbtt__cff_index_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stbtt__cff_index_count &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
</UL>

<P><STRONG><a name="[1c8]"></a>stbtt__cff_index_get</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, rh_font.o(i.stbtt__cff_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = stbtt__cff_index_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1d5]"></a>stbtt__cff_int</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rh_font.o(i.stbtt__cff_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = stbtt__cff_int &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
</UL>

<P><STRONG><a name="[1d6]"></a>stbtt__cff_skip_operand</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rh_font.o(i.stbtt__cff_skip_operand))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = stbtt__cff_skip_operand &rArr; stbtt__cff_int &rArr; stbtt__buf_get &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_peek8
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
</UL>

<P><STRONG><a name="[1d8]"></a>stbtt__cid_get_glyph_subrs</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, rh_font.o(i.stbtt__cid_get_glyph_subrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[1d1]"></a>stbtt__close_shape</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, rh_font.o(i.stbtt__close_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__close_shape &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[1d9]"></a>stbtt__csctx_close_shape</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rh_font.o(i.stbtt__csctx_close_shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stbtt__csctx_close_shape &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
</UL>

<P><STRONG><a name="[1db]"></a>stbtt__csctx_rccurve_to</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, rh_font.o(i.stbtt__csctx_rccurve_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stbtt__csctx_rccurve_to &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[1dc]"></a>stbtt__csctx_rline_to</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__csctx_rline_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stbtt__csctx_rline_to &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[1dd]"></a>stbtt__csctx_rmove_to</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__csctx_rmove_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = stbtt__csctx_rmove_to &rArr; stbtt__csctx_close_shape &rArr; stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[1da]"></a>stbtt__csctx_v</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, rh_font.o(i.stbtt__csctx_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__csctx_v &rArr; stbtt_setvertex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_setvertex
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__track_vertex
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rline_to
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rccurve_to
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
</UL>

<P><STRONG><a name="[1df]"></a>stbtt__dict_get</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__dict_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_skip_operand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_peek8
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
</UL>

<P><STRONG><a name="[1c9]"></a>stbtt__dict_get_ints</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, rh_font.o(i.stbtt__dict_get_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1e0]"></a>stbtt__fill_active_edges_new</STRONG> (Thumb, 1790 bytes, Stack size 104 bytes, rh_font.o(i.stbtt__fill_active_edges_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__handle_clipped_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[1c3]"></a>stbtt__find_table</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__find_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbtt__find_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttUSHORT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttULONG
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1e2]"></a>stbtt__get_subr</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rh_font.o(i.stbtt__get_subr))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = stbtt__get_subr &rArr; stbtt__cff_index_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__run_charstring
</UL>

<P><STRONG><a name="[1ca]"></a>stbtt__get_subrs</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, rh_font.o(i.stbtt__get_subrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_buf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__dict_get_ints
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_get_index
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_seek
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1e1]"></a>stbtt__handle_clipped_edge</STRONG> (Thumb, 780 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__handle_clipped_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
</UL>

<P><STRONG><a name="[1e3]"></a>stbtt__hheap_alloc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rh_font.o(i.stbtt__hheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = stbtt__hheap_alloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
</UL>

<P><STRONG><a name="[1e4]"></a>stbtt__hheap_cleanup</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rh_font.o(i.stbtt__hheap_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stbtt__hheap_cleanup &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[1e8]"></a>stbtt__hheap_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rh_font.o(i.stbtt__hheap_free))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[1e5]"></a>stbtt__new_active</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__new_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stbtt__new_active &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
</UL>

<P><STRONG><a name="[1c2]"></a>stbtt__new_buf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rh_font.o(i.stbtt__new_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subrs
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_range
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
</UL>

<P><STRONG><a name="[1cf]"></a>stbtt__rasterize</STRONG> (Thumb, 474 bytes, Stack size 112 bytes, rh_font.o(i.stbtt__rasterize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = stbtt__rasterize &rArr; stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize_sorted_edges
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_Rasterize
</UL>

<P><STRONG><a name="[1e7]"></a>stbtt__rasterize_sorted_edges</STRONG> (Thumb, 590 bytes, Stack size 600 bytes, rh_font.o(i.stbtt__rasterize_sorted_edges))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = stbtt__rasterize_sorted_edges &rArr; stbtt__fill_active_edges_new &rArr; stbtt__handle_clipped_edge &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__new_active
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__hheap_cleanup
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__fill_active_edges_new
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
</UL>

<P><STRONG><a name="[1d0]"></a>stbtt__run_charstring</STRONG> (Thumb, 2256 bytes, Stack size 488 bytes, rh_font.o(i.stbtt__run_charstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = stbtt__run_charstring &rArr; stbtt__cid_get_glyph_subrs &rArr; stbtt__get_subrs &rArr; stbtt__dict_get_ints &rArr; stbtt__dict_get &rArr; stbtt__buf_range &rArr; stbtt__new_buf &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__get_subr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rmove_to
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rline_to
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_rccurve_to
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_close_shape
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cid_get_glyph_subrs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__cff_index_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_skip
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeT2
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphInfoT2
</UL>

<P><STRONG><a name="[1e6]"></a>stbtt__sort_edges</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rh_font.o(i.stbtt__sort_edges))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stbtt__sort_edges &rArr; stbtt__sort_edges_quicksort &rArr;  stbtt__sort_edges_quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_ins_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__rasterize
</UL>

<P><STRONG><a name="[1ea]"></a>stbtt__sort_edges_ins_sort</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, rh_font.o(i.stbtt__sort_edges_ins_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stbtt__sort_edges_ins_sort &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
</UL>

<P><STRONG><a name="[1e9]"></a>stbtt__sort_edges_quicksort</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, rh_font.o(i.stbtt__sort_edges_quicksort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = stbtt__sort_edges_quicksort &rArr;  stbtt__sort_edges_quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges_quicksort
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__sort_edges
</UL>

<P><STRONG><a name="[1b5]"></a>stbtt__tesselate_cubic</STRONG> (Thumb, 614 bytes, Stack size 192 bytes, rh_font.o(i.stbtt__tesselate_cubic))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = stbtt__tesselate_cubic &rArr;  stbtt__tesselate_cubic (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_cubic
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[1b4]"></a>stbtt__tesselate_curve</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, rh_font.o(i.stbtt__tesselate_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = stbtt__tesselate_curve &rArr;  stbtt__tesselate_curve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__tesselate_curve
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FlattenCurves
</UL>

<P><STRONG><a name="[1de]"></a>stbtt__track_vertex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rh_font.o(i.stbtt__track_vertex))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
</UL>

<P><STRONG><a name="[1d2]"></a>stbtt_setvertex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rh_font.o(i.stbtt_setvertex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stbtt_setvertex
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__csctx_v
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__close_shape
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
</UL>

<P><STRONG><a name="[1b0]"></a>ttSHORT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rh_font.o(i.ttSHORT))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_ScaleForPixelHeight
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphBox
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetFontVMetrics
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>

<P><STRONG><a name="[1b1]"></a>ttULONG</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rh_font.o(i.ttULONG))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>

<P><STRONG><a name="[1af]"></a>ttUSHORT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rh_font.o(i.ttUSHORT))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__find_table
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyphShapeTT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt__GetGlyfOffset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_InitFont_internal
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_GetGlyphHMetrics
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stbtt_FindGlyphIndex
</UL>

<P><STRONG><a name="[fb]"></a>__ApplyPixel_cpblur</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, rh_graphic.o(i.__ApplyPixel_cpblur))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __ApplyPixel_cpblur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>__ApplyPixel_eor</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rh_graphic.o(i.__ApplyPixel_eor))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = __ApplyPixel_eor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>__ApplyPixel_fill</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rh_graphic.o(i.__ApplyPixel_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = __ApplyPixel_fill &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>__ApplyPixel_lightness</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, rh_graphic.o(i.__ApplyPixel_lightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = __ApplyPixel_lightness &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>__ApplyPixel_mark</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rh_graphic.o(i.__ApplyPixel_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = __ApplyPixel_mark &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>__ApplyPixel_reverse</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, rh_graphic.o(i.__ApplyPixel_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = __ApplyPixel_reverse &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>__ApplyPixel_unmark</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rh_graphic.o(i.__ApplyPixel_unmark))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = __ApplyPixel_unmark &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>__ApplyPixel_unzero</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rh_graphic.o(i.__ApplyPixel_unzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = __ApplyPixel_unzero &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rh_graphic.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
